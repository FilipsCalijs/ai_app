from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import os

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]],
    resize_keyboard=True
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–≥–ª–∞—Å–µ–Ω"
agree_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")
        ]
    ]
)

user_agreements = set()

@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def start_button_handler(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        reply_markup=agree_inline_keyboard
    )

@dp.callback_query(lambda c: c.data == "agree")
async def agree_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_agreements.add(user_id)
    await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
    await callback_query.message.edit_reply_markup(reply_markup=language_inline_keyboard)
    await callback_query.answer()

@dp.message(lambda message: message.from_user.id not in user_agreements and message.text not in ["–ù–∞—á–∞—Ç—å"])
async def block_without_agreement(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª'–ù–∞—á–∞—Ç—å' –∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.")

@dp.callback_query(lambda c: c.data and c.data.startswith("lang_"))
async def language_callback_handler(callback_query: types.CallbackQuery):
    lang_code = callback_query.data.split("_")[1]
    if lang_code == "ru":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫")
    elif lang_code == "en":
        await callback_query.message.answer("You selected English üá∫üá∏")
    await callback_query.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())